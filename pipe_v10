#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <unistd.h>
#include <string.h>
#define SIZE 1000
#define MAX 200
//STACK
typedef struct stack{
    char data[MAX];
    int top;
} stack;
//Init stack
void init(struct stack *S){
    S->top = 0;
}
// isEmpty Stack
int isEmpty(stack S){
    return (S.top == 0);
}
// isFull stack
int isFull(stack S){
    return (S.top == MAX);
}
//push into stack
void push(stack *S, char x){
    if(!isFull(*S)){
        S->data[S->top] = x;
        S->top++;
    }
}
//pop from stack
int pop(stack *S){
    if(!isEmpty(*S)){
        S->top --;
        return S->data[S->top];
    }
    return 0;
}
//see value of top stack
int peak(stack S){
    return S.data[S.top-1];
}
//END STACK
void baoloi(char *x){
    puts(x);
    exit(0);
}
//check priority
// s,c,t,l,p: sin, cos, tan, log
int checkPriority(char x){
    if (x == '(') return 0;
	if (x == '+' || x == '-') return 1 ;
	if (x == '*' || x == '/' || x == '^') return 2;
    if (x == 's' || x == 'c' ||  x == 't' || x == 'l' || x == 'p') return 3;
    return -1;
}
//caculate express two operand
float cacl2(float operand1, float operand2, char op){
     switch(op){
       case '+':return operand1 + operand2;
       case '-':return operand1 - operand2;
       case '*':return operand1 * operand2;
       case '/':
        if(operand2==0) baoloi("Loi chia cho 0");
        return  operand1 / operand2;
       case '^':return pow(operand1,operand2);
    }
    return 0;
}
//caculate express one operand
float cacl1(float operand, char op){
    switch(op){
        case 's':return sin(operand);
        case 'c':return cos(operand);
        case 't':return tan(operand);
        case 'l':return log10(operand);
    };
    return 0;
}

//kiem tra la cac phep toan +, -, *, /
int checkPhepToanVaNgoac(char ch){
	if (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '(' || ch == ')')
		return 1;
	return 0;
}
int checkPhepToan(char ch){
    if (ch == '+' || ch == '-' || ch == '*' || ch == '/')
		return 1;
	return 0;
}
int checkPhepToanMotSohang(char ch){
    if (ch == 's' || ch == 'c' || ch == 't' || ch == 'l')
		return 1;
	return 0;
}
//ham refine
//refine input string to standard is strim first, last space char
//and add one space to the middle two char
int refine(char *input, char *output){
    output[0] = '\0';
    int i=0, j=0; //i - index of input, j - index of output
    char token;
    char *temp=(char*)malloc(strlen(input)+1);
    int k=0;
    for(int i=0;i<strlen(input);i++)
        if (input[i]!=32) temp[k++]=input[i];
    temp[k]=0;
    strcpy(input,temp);
    free(temp);
    for(i=0; i< strlen(input); i++){
        token = input[i];
        if(isdigit(token)){
            output[j++] = token;
            if(!isdigit(input[i+1])){
                output[j++] = ' ';
            }
        } else if(checkPhepToanVaNgoac(input[i])){
            output[j++] = token;
            output[j++] = ' ';
        } else if (isalpha(token)){
            output[j++] = token;
            if(!isalpha(input[i+1])){
                output[j++] = ' ';
            }
        }
    }
    output[j++] = '\0';
    return 1;
}

//convert infix to postfix
int InfixToPostfix(char * infix, char *postfix){
    stack S;
    init(&S);
    char x,token;
    int i=0, j=0;    //i-index of infix,j-index of postfix
    int n = strlen(infix);
    infix[n++] = '\0';
    for(i=0 ; i< strlen(infix); ){
        token = infix[i];
        if(isdigit(token)){
            postfix[j++] = token;
            if(infix[i+1] == ' '){
                postfix[j++] = ' ';
                i = i + 2;
            } else {
                i= i +1;
            }
        } else if(token == '('){
            push(&S, '(');
            i=i+2;
        } else if (token == ')'){
            while((x = pop(&S)) != '('){
                postfix[j++] = x;
                postfix[j++] = ' ';
            }
            i = i +2;
        } else {
            if(checkPhepToan(token)){
            //sua if -> while?????
                while(checkPriority(token) <= checkPriority(peak(S)) && !isEmpty(S)){
                    x = pop(&S);
                    postfix[j++] = x;
                    postfix[j++] = ' ';
                }
                push(&S, token);
                i = i+2;
            } else {
                char biendoikihieu;
                switch (token){
                    case 's':
                    case 'S': //xem co phai la sin khong?
                        if((toupper(infix[i+1]) == 'I') && (toupper(infix[i+2]) == 'N')){
                            biendoikihieu = 's';
                            i = i + 4;
                        } else {
                            baoloi("\tSai syntax!");
                        }
                        break;
                    case 'c':
                    case 'C': //xem co phai la cos khong?
                        if((toupper(infix[i+1]) == 'O') && (toupper(infix[i+2]) == 'S')){
                            biendoikihieu = 'c';
                            i = i + 4;
                        } else {
                            baoloi("\tSai syntax!");
                        }
                        break;
                    case 't':
                    case 'T': //xem day co phai la tan ko?
                        if((toupper(infix[i+1]) == 'A') && (toupper(infix[i+2]) == 'N')){
                            biendoikihieu = 't';
                            i = i + 4;
                        } else {
                            baoloi("Sai syntax!");
                        }
                        break;
                    case 'l':
                    case 'L': //xem day co phai la tan ko?
                        if(toupper(infix[i+1]) == 'N'){
                            biendoikihieu = 'l';
                            i = i + 3;
                        } else if((toupper(infix[i+1]) == 'O') && (toupper(infix[i+2]) == 'G')){
                            biendoikihieu = 'l';
                            i = i + 4;
                        }else{
                            baoloi("\tSai syntax!");
                        }
                        break;
                    default:
                        baoloi("\tSai syntax!");
                        break;
                }
                /*if(checkPriority(biendoikihieu) <= checkPriority(peak(S)) && !isEmpty(S)){
                    x = pop(&S);
                    postfix[j++] = x;
                    postfix[j++] = ' ';
                }*/
                while(checkPriority(biendoikihieu) <= checkPriority(peak(S)) && !isEmpty(S)){
                    x = pop(&S);
                    postfix[j++] = x;
                    postfix[j++] = ' ';
                }
                push(&S, biendoikihieu);
            }
        }
    }
    while(!isEmpty(S)){
        x = pop(&S);
        postfix[j++] = x;
        postfix[j++] = ' ';
    }
    postfix[j++] = '\0';
    return 1;
}
//ham xuat bieu thuc hau to
void printPostfix(char * postfix){
    int k =0;
    char token;
    printf("\tBien doi thanh Postfix: ");
    for(int i =0; i < strlen(postfix); i++){
        token = postfix[i];
        if(isdigit(token) || token == ' ' || checkPhepToan(token)==1){
            printf("%c", token);
        } else {
            switch (token){
                case 's':
                    printf("%c", 's');
                    printf("%c", 'i');
                    printf("%c", 'n');
                    break;
                case 'c':
                    printf("%c", 'c');
                    printf("%c", 'o');
                    printf("%c", 's');
                    break;
                case 't':
                    printf("%c", 't');
                    printf("%c", 'a');
                    printf("%c", 'n');
                    break;
                case 'l':
                    printf("%c", 'l');
                    printf("%c", 'o');
                    printf("%c", 'g');
                    break;
                default:
                    break;
            }
        }
    }
    printf("\n");
}
//doi thanh so
int changeToNumber(char arr[]) {
    int so = 0;
    int i = 0;
    for(i =0; arr[i] != '\0'; i++) {
       so = so *10+ arr[i] - 48;
    }
    return so;
}
float StackTinh[200]={0};
int topStackTinh=0;
void pushStackTinh(float x){
    topStackTinh++;
    StackTinh[topStackTinh]=x;
}
float getStackTinh(){
    topStackTinh--;
    return StackTinh[topStackTinh+1];
}

//Tinh toan bieu thuc postfix
//dang bi loi o tinh 5-5-5, => da fix, OK
float CaculatePostfix(char *postfix){
    float sum = 0;
    char token;
    int i = 0; //i - index of postfix
    while(postfix[i] != '\0'){
        token = postfix[i];
        if(isdigit(token)){
            char mangso[20];
            int k = 0; //k- index of mangso
            int dem = 0;
            int j = 0;
            for(j = i; j < strlen(postfix); j++){
                if(isdigit(postfix[j])){
                    mangso[k++] = postfix[j];
                    dem++;
                } else {
                    break;
                }
            }
            mangso[k++] = '\0';
            int m = 0;
            m = changeToNumber(mangso);
            pushStackTinh(m);
            i = i+dem;
        } else if (postfix[i] == ' '){
            i++;
            continue;
        } else if (postfix[i] == '\0'){
            break;
        } else {
            //kiem tra neu la + - * / ^ thi lay 2 gia tri tu dinh stack ra tinh
            if(checkPhepToan(token)){
                float oper2 = getStackTinh();
                float oper1 = getStackTinh();
                float kqua = 0;
                kqua = cacl2(oper1,oper2,token);
                pushStackTinh(kqua);
                i++;
            }
            if(checkPhepToanMotSohang(token)){
            //neu s,c,t,l thi lay 1 gia tri tu dinh stack ra de tinh
                float oper = getStackTinh();
                float kq = 0;
                kq = cacl1(oper, token);
                pushStackTinh(kq);
                i++;
            }
        }
    }
    sum = getStackTinh();
    return sum;
}
int main () {
    int pipefds1[2]; //cha ghi, con doc (input string)
    int pipefds2[2]; // cha doc, con ghi (result)
    int status1, status2;
    //Read: 0 , Write: 1
    //parentRead: pipefds1[0]
    //childWrite: pipefds1[1]
    //childRead: pipefds2[0]
    //parentWrite: pipefds2[1]
    pid_t pid;
    char pipe1writeMessage[MAX];
    char A[MAX];
    char pipe2writeMessage[MAX];
    char readMessage[MAX];

    status1 = pipe(pipefds1);
    if(status1 == -1){
        printf("\tKhong the tao pipe 1!");
        return 1;
    }
    status2 = pipe(pipefds2);
    if(status2 == -1){
        printf("\tKhong the tao pipe 2!");
        return 1;
    }
    pid = fork();
    if(pid == (pid_t) 0){
        //child
        close(pipefds1[1]);
        close(pipefds2[0]);
        char result[MAX] = "\t===> Ket qua: ";
        char floatToChar[20];
        char inPos[MAX];
        read(pipefds1[0], readMessage, sizeof(readMessage));
        printf("\n\t+----- TIEN TRINH CON -------------+\n\n");
        printf("\tDoc tu pipe 1, nhan du lieu tu CHA:\n");
        printf("\t%s\n\n", readMessage);
        refine(readMessage, A);
        InfixToPostfix(A,pipe2writeMessage);
        printPostfix(pipe2writeMessage);
        printf("\n\tViet vao pipe 2, gui cho tien trinh CHA: %.3f\n", CaculatePostfix(pipe2writeMessage));
        sprintf(floatToChar, "%.3f", CaculatePostfix(pipe2writeMessage));
        strcat(result, floatToChar);
        write(pipefds2[1], result, sizeof(result));
        printf("\n\t+----- KET THUC TIEN TRINH CON ----+\n\n");
    } else {
        //parent
        close(pipefds1[0]);
        close(pipefds2[1]);
        printf("\t\t+======= GIAO TIEP GIUA CAC TIEN TRINH PIPE =======+\n");
        printf("\t\t|\t\t\t\t\t\t   |\n");
        printf("\t\t|\t  TRAN HUU TRUNG  - LOP 15T2\t\t   |\n");
        printf("\t\t|\t\t\t\t\t\t   |\n");
        printf("\t\t|\t  MSSV: 102150142       \t\t   |\n");
        printf("\t\t|\t\t\t\t\t\t   |\n");
        printf("\t\t+==================================================+\n\n");
        printf("\t+========================= TIEN TRINH CHA ==========================+\n\n");
        printf("\tViet vao pipe 1, gui cho tien trinh CON\n\n");
        printf("\tNhap bieu thuc tinh: ");
        gets(pipe1writeMessage);
        if(strlen(pipe1writeMessage) < 1){
            printf("\tBieu thuc tinh khong duoc rong!\n");
            return 1;
        } else {
            write(pipefds1[1], pipe1writeMessage, sizeof(pipe1writeMessage));
            //sleep(1);
            read(pipefds2[0], readMessage, sizeof(readMessage));
            if(!readMessage){
                printf("\tDu lieu bi loi!");
            }else {
                printf("\tTien trinh CHA doc tu pipe 2, nhan tu CON\n\n%s\n", readMessage);
            }
            printf("\n\t+==================== KET THUC TIEN TRINH CHA ======================+\n");
        }
    }
    return 0;
}
